diff --git a/defs/id.def b/defs/id.def
index bb7cc6f922..27847e26e9 100644
--- a/defs/id.def
+++ b/defs/id.def
@@ -102,6 +102,7 @@ token_ops = %[\
   NeqTilde      !~      NMATCH
   AREF          []
   ASET          []=
+  PIPE          |>
   COLON2        ::
   ANDOP         &&
   OROP          ||
diff --git a/parse.y b/parse.y
index 09afa6bedd..fe3478f141 100644
--- a/parse.y
+++ b/parse.y
@@ -867,6 +867,7 @@ static void token_info_warn(struct parser_params *p, const char *token, token_in
 %token <id> '\13'	"escaped vertical tab"
 %token tUPLUS		RUBY_TOKEN(UPLUS)  "unary+"
 %token tUMINUS		RUBY_TOKEN(UMINUS) "unary-"
+%token tPIPE		RUBY_TOKEN(PIPE)   "|>"
 %token tPOW		RUBY_TOKEN(POW)    "**"
 %token tCMP		RUBY_TOKEN(CMP)    "<=>"
 %token tEQ		RUBY_TOKEN(EQ)     "=="
@@ -920,6 +921,7 @@ static void token_info_warn(struct parser_params *p, const char *token, token_in
 %left  tOROP
 %left  tANDOP
 %nonassoc  tCMP tEQ tEQQ tNEQ tMATCH tNMATCH
+%left tPIPE
 %left  '>' tGEQ '<' tLEQ
 %left  '|' '^'
 %left  '&'
@@ -1791,7 +1793,8 @@ undef_list	: fitem
 		    }
 		;
 
-op		: '|'		{ ifndef_ripper($$ = '|'); }
+op		: tPIPE		{ ifndef_ripper($$ = tPIPE); }
+		| '|'		{ ifndef_ripper($$ = '|'); }
 		| '^'		{ ifndef_ripper($$ = '^'); }
 		| '&'		{ ifndef_ripper($$ = '&'); }
 		| tCMP		{ ifndef_ripper($$ = tCMP); }
@@ -1984,6 +1987,10 @@ arg		: lhs '=' arg_rhs
 		    {
 			$$ = call_uni_op(p, $2, idUMinus, &@1, &@$);
 		    }
+		| arg tPIPE arg
+		    {
+			$$ = call_bin_op(p, $1, tPIPE, $3, &@2, &@$);
+		    }
 		| arg '|' arg
 		    {
 			$$ = call_bin_op(p, $1, '|', $3, &@2, &@$);
@@ -7996,6 +8003,11 @@ parser_yylex(struct parser_params *p)
 	    SET_LEX_STATE(EXPR_BEG);
 	    return tOP_ASGN;
 	}
+	if (c == '>') {
+		set_yylval_id(idPIPE);
+	    SET_LEX_STATE(EXPR_BEG);
+	    return tPIPE;
+	}
 	SET_LEX_STATE(IS_AFTER_OPERATOR() ? EXPR_ARG : EXPR_BEG|EXPR_LABEL);
 	pushback(p, c);
 	return '|';
diff --git a/string.c b/string.c
index 855d594b84..ebd2046231 100644
--- a/string.c
+++ b/string.c
@@ -1922,6 +1922,34 @@ rb_str_plus(VALUE str1, VALUE str2)
     return str3;
 }
 
+VALUE
+rb_str_rotate(VALUE str, VALUE by)
+{
+    long count = NUM2LONG(by);
+    long len = RSTRING_LEN(str);
+    char* p = RSTRING_PTR(str);
+
+    VALUE str2 = str_alloc(rb_obj_class(str));
+    STR_SET_LEN(str2, len);
+    rb_enc_copy(str2, str);
+    OBJ_INFECT(str2, str);
+
+    char* p2 = RSTRING_PTR(str2);
+
+    for (long i = 0; i < len; ++i) {
+        if (p[i] >= 'a' && p[i] <= 'z') {
+            p2[i] = (char)((((int)p[i] - 'a') + count) % 26) + 'a';
+        } else if (p[i] >= 'A' && p[i] <= 'Z') {
+            p2[i] = (char)((((int)p[i] - 'A') + count) % 26) + 'A';
+        } else {
+            p2[i] = p[i];
+        }
+    }
+
+    return str2;
+}
+
+
 /*
  *  call-seq:
  *     str * integer   -> new_str
@@ -10980,6 +11008,7 @@ Init_String(void)
     rb_define_method(rb_cString, "casecmp?", rb_str_casecmp_p, 1);
     rb_define_method(rb_cString, "+", rb_str_plus, 1);
     rb_define_method(rb_cString, "*", rb_str_times, 1);
+    rb_define_method(rb_cString, "|>", rb_str_rotate, 1);
     rb_define_method(rb_cString, "%", rb_str_format_m, 1);
     rb_define_method(rb_cString, "[]", rb_str_aref_m, -1);
     rb_define_method(rb_cString, "[]=", rb_str_aset_m, -1);
